type rec_1 = record {id:text};
type rec_0 = record {int:int; string:text; boolean:bool; otherUserDefinedRecord:rec_1};
type rec_3 = record {id:text};
type rec_2 = record {int:int; string:text; boolean:bool; otherUserDefinedRecord:rec_3};
type rec_5 = record {id:text};
type rec_4 = record {int:int; string:text; boolean:bool; otherUserDefinedRecord:rec_5};
type rec_7 = record {id:text};
type rec_6 = record {int:int; string:text; boolean:bool; otherUserDefinedRecord:rec_7};
type rec_9 = record {id:text};
type rec_8 = record {int:int; string:text; boolean:bool; otherUserDefinedRecord:rec_9};
type rec_12 = record {id:text};
type rec_11 = record {int:int; string:text; boolean:bool; otherUserDefinedRecord:rec_12};
type rec_10 = variant {Gamma:int; Beta:bool; Zeta:record {int; text}; Delta:text; Epsilon:rec_11; Alpha};
type rec_15 = record {id:text};
type rec_14 = record {int:int; string:text; boolean:bool; otherUserDefinedRecord:rec_15};
type rec_13 = variant {Gamma:int; Beta:bool; Zeta:record {int; text}; Delta:text; Epsilon:rec_14; Alpha};
type rec_18 = record {id:text};
type rec_17 = record {int:int; string:text; boolean:bool; otherUserDefinedRecord:rec_18};
type rec_16 = variant {Gamma:int; Beta:bool; Zeta:record {int; text}; Delta:text; Epsilon:rec_17; Alpha};
type rec_21 = record {id:text};
type rec_20 = record {int:int; string:text; boolean:bool; otherUserDefinedRecord:rec_21};
type rec_19 = variant {Gamma:int; Beta:bool; Zeta:record {int; text}; Delta:text; Epsilon:rec_20; Alpha};
type rec_24 = record {id:text};
type rec_23 = record {int:int; string:text; boolean:bool; otherUserDefinedRecord:rec_24};
type rec_22 = variant {Gamma:int; Beta:bool; Zeta:record {int; text}; Delta:text; Epsilon:rec_23; Alpha};
type rec_27 = record {id:text};
type rec_26 = record {int:int; string:text; boolean:bool; otherUserDefinedRecord:rec_27};
type rec_25 = variant {Gamma:int; Beta:bool; Zeta:record {int; text}; Delta:text; Epsilon:rec_26; Alpha};
type rec_30 = record {id:text};
type rec_29 = record {int:int; string:text; boolean:bool; otherUserDefinedRecord:rec_30};
type rec_28 = variant {Gamma:int; Beta:bool; Zeta:record {int; text}; Delta:text; Epsilon:rec_29; Alpha};
type rec_33 = record {id:text};
type rec_32 = record {int:int; string:text; boolean:bool; otherUserDefinedRecord:rec_33};
type rec_31 = variant {Gamma:int; Beta:bool; Zeta:record {int; text}; Delta:text; Epsilon:rec_32; Alpha};
service: () -> {
    returnNonObjectAsInvalidBlob: () -> (vec nat8) query;
    returnEmptyObjectAsInvlidBlob: () -> (vec nat8) query;
    returnNonArrayValueAsInvalidFunc: () -> (func () -> () query) query;
    returnEmptyObjectAsInvalidFunc: () -> (func () -> () query) query;
    returnEmptyArrayAsInvalidFunc: () -> (func () -> () query) query;
    returnNonPrincipalValueAsInvalidFunc: () -> (func () -> () query) query;
    returnEmptyObjectPrincipalAsInvalidFunc: () -> (func () -> () query) query;
    returnArrayWithOnlyPrincipalAsInvalidFunc: () -> (func () -> () query) query;
    returnNonStringCanisterMethodNameAsInvalidFunc: () -> (func () -> () query) query;
    returnInvalidNumber: () -> (float64) query;
    returnInvalidInt: () -> (int) query;
    returnInvalidInt8: () -> (int8) query;
    returnInvalidInt16: () -> (int16) query;
    returnInvalidInt32: () -> (int32) query;
    returnInvalidInt64: () -> (int64) query;
    returnInvalidNat: () -> (nat) query;
    returnInvalidNat8: () -> (nat8) query;
    returnInvalidNat16: () -> (nat16) query;
    returnInvalidNat32: () -> (nat32) query;
    returnInvalidNat64: () -> (nat64) query;
    returnInvalidFloat32: () -> (float32) query;
    returnInvalidFloat64: () -> (float64) query;
    returnNonObject: () -> (opt text) query;
    returnBothSomeAndNone: () -> (opt text) query;
    returnObjectWithNeitherSomeNorNone: () -> (opt text) query;
    returnNonNullNone: () -> (opt text) query;
    returnInvalidSomeValue: () -> (opt text) query;
    returnInvalidBooleanValue: () -> (bool) query;
    returnInvalidEmptyValue: () -> (empty) query;
    returnInvalidNullValue: () -> (null) query;
    returnInvalidStringValue: () -> (text) query;
    returnInvalidTextValue: () -> (text) query;
    returnInvalidVoidValue: () -> () query;
    returnInvalidVoidAliasValue: () -> () query;
    returnInvalidNullAliasValue: () -> (null) query;
    returnStringAsInvalidPrincipal: () -> (principal) query;
    returnEmptyObjectAsInvalidPrincipal: () -> (principal) query;
    returnInvalidToTextPropertyAsInvalidPrincipal: () -> (principal) query;
    throwInPrincipalToTextMethodAsInvalidPrincipal: () -> (principal) query;
    returnInvalidToTextReturnValueAsInvalidPrincipal: () -> (principal) query;
    throwWhenCallingPrincipalFromText: () -> (principal) query;
    returnInvalidPrincipalFromTooShortOfText: () -> (principal) query;
    returnStringAsInvalidUserDefinedRecord: () -> (rec_0) query;
    returnEmptyObjectAsInvalidUserDefinedRecord: () -> (rec_2) query;
    returnStringAsInvalidVecUserDefinedRecord: () -> (rec_4) query;
    returnObjectAsInvalidVecUserDefinedRecord: () -> (vec rec_6) query;
    returnArrayWithInvalidUserDefinedRecord: () -> (vec rec_8) query;
    returnNonObjectAsInvalidResult: () -> (variant {Ok:text; Err:text}) query;
    returnBothOkAndErr: () -> (variant {Ok:text; Err:text}) query;
    returnObjectWithNeitherOkNorErr: () -> (variant {Ok:text; Err:text}) query;
    returnInvalidOkValue: () -> (variant {Ok:text; Err:text}) query;
    returnInvalidErrValue: () -> (variant {Ok:text; Err:text}) query;
    throwBigint: () -> () query;
    throwBoolean: () -> () query;
    throwClass: () -> () query;
    throwCustomError: () -> () query;
    throwInt: () -> () query;
    throwNull: () -> () query;
    throwNullReference: () -> () query;
    throwObject: () -> () query;
    throwRational: () -> () query;
    throwString: () -> () query;
    throwSymbol: () -> () query;
    throwUndefined: () -> () query;
    accessible: () -> (bool);
    inaccessible: () -> (bool);
    alsoInaccessible: () -> (bool);
    returnStringAsInvalidUserDefinedVariant: () -> (rec_10) query;
    returnEmptyObjectAsInvalidUserDefinedVariant: () -> (rec_13) query;
    returnObjectWithInvalidTagAsInvalidUserDefinedVariant: () -> (rec_16) query;
    returnObjectWithMultipleTagsAsInvalidUserDefinedVariant: () -> (rec_19) query;
    returnObjectWithInvalidFieldsAsInvalidUserDefinedVariant: () -> (rec_22) query;
    returnStringAsInvalidVecUserDefinedVariant: () -> (vec rec_25) query;
    returnObjectAsInvalidVecUserDefinedVariant: () -> (vec rec_28) query;
    returnArrayWithInvalidUserDefinedVariant: () -> (vec rec_31) query;
    returnNonObjectAsInvalidVec: () -> (vec text) query;
    returnNonArrayAsInvalidVec: () -> (vec text) query;
    returnArrayWithInvalidVecItem: () -> (vec text) query;
}
