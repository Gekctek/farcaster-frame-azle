service: () -> {
    addSigFigs: (float32) -> (float64) query;
    checkCanister: (service {deliver: () -> (text); is_delivered: () -> (bool) query;}) -> (service {deliver: () -> (text); is_delivered: () -> (bool) query;}) query;
    checkCanisterAlias: (service {testQuery: () -> (text) query;}) -> (service {testQuery: () -> (text) query;}) query;
    checkPrimAliases: (bool, null, text, int, float64) -> () query;
    checkWatermelonForSeeds: (bool, variant {Seeds; Seedless}) -> () query;
    compareApplesToOranges: (record {"int":int; starInt:int; "int8":int8; "int16":int16; "int32":int32; "int64":int64}, record {"nat":nat; starNat:nat; "nat8":nat8; "nat16":nat16; "nat32":nat32; "nat64":nat64}) -> (bool) query;
    compareStars: (record {star:bool}, record {star:bool}) -> (variant {Ok:bool; Err:text}) query;
    deepEmptyAlias: () -> (empty) query;
    dirtyIlama: () -> ();
    getDeepBlob: (vec nat8) -> (vec nat8) query;
    getManagementPeach: () -> (principal) query;
    getManualAlias: () -> (float64) query;
    getMyRecord: () -> (record {id:nat; list:vec nat16; name:opt text; tups:record {text; float64}; description:variant {bad; good; ugly}; depth:record {depth:nat8}}) query;
    getMyRecordAlias: () -> (record {id:nat; list:vec nat16; name:opt text; tups:record {text; float64}; description:variant {bad; good; ugly}; depth:record {depth:nat8}}) query;
    getNumberAliases: () -> (record {fifth:int; first:int; tenth:nat; third:float64; eighth:int; seventh:float64; second:int; sixth:float32; ninth:int8; eleventh:nat8; twelfth:float64; fourth:int}) query;
    getReservedAlias: () -> (reserved) query;
    getStable: (nat16) -> (opt text) query;
    getSuperAlias: () -> (record {id:nat; list:vec nat16; name:opt text; tups:record {text; float64}; description:variant {bad; good; ugly}; depth:record {depth:nat8}}) query;
    handleFarkleberries: (func (text) -> () oneway, func (text) -> (text) query, func (text) -> (text)) -> (record {func (text) -> (text); func (text) -> () oneway; func (text) -> (text) query}) query;
    helloAzleTextAlias: () -> (text) query;
    helloDeepTextAlias: () -> (text) query;
    helloMixedTextAlias: () -> (text) query;
    helloStirredTextAlias: () -> (text) query;
    helloTextAlias: () -> (text) query;
    isFruitPrepared: () -> (bool) query;
    isMangoTrickyToEat: () -> (bool) query;
    makeCavernousRecord: () -> (record {myRecord:record {int1:int16; int2:int16; int3:int16; int4:int8; int5:int8; int6:int8; int7:int8; "int8":int8; int9:int16}; myDeepTuple:record {text}; myCavernousTuple:record {text}; fathomlessRecord:record {mytext:text}; coveredRecord:record {type_name:text; name:text; count:int8; greeting:opt text}; myTuple:record {text}}) query;
    myFathomlessVariantToMyCavernousVariant: (variant {MyInt16:int16; MyInt8:int8}) -> (variant {sixteen; eight}) query;
    myVariantToMyDeepVariant: (variant {String:text; Thing:int8}) -> (variant {Thing:int8}) query;
    passPrincipal: (principal) -> (principal) query;
    peelBanana: (vec nat8) -> (nat8) query;
    pickElderberry: () -> (empty);
    pitOlives: (opt bool) -> (bool) query;
    putTheCoconutInTheLime: (int16) -> (vec int16) query;
    removeRambutanSkins: () -> (reserved);
    returnFathomlessCanister: (service {query1: () -> (bool) query; update1: () -> (text);}) -> (service {query1: () -> (bool) query; update1: () -> (text);}) query;
    returnFathomlessVec: () -> (vec int16) query;
    returnFuncAlias: (func (text) -> (text) query) -> (func (text) -> (text) query) query;
    returnVec: () -> (vec vec nat8) query;
    returnWeird: () -> (int64) query;
    setStable: (nat16, text) -> (opt text);
    simpleAzleQuery: () -> () query;
    simpleDeepQuery: () -> () query;
    simpleQuery: () -> () query;
    typeCheck: (vec opt int16) -> (int16) query;
}
